// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: propagation_manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PropagationManager_SendDataToPropagationManager_FullMethodName = "/gosphere.PropagationManager/SendDataToPropagationManager"
)

// PropagationManagerClient is the client API for PropagationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropagationManagerClient interface {
	SendDataToPropagationManager(ctx context.Context, opts ...grpc.CallOption) (PropagationManager_SendDataToPropagationManagerClient, error)
}

type propagationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPropagationManagerClient(cc grpc.ClientConnInterface) PropagationManagerClient {
	return &propagationManagerClient{cc}
}

func (c *propagationManagerClient) SendDataToPropagationManager(ctx context.Context, opts ...grpc.CallOption) (PropagationManager_SendDataToPropagationManagerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropagationManager_ServiceDesc.Streams[0], PropagationManager_SendDataToPropagationManager_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &propagationManagerSendDataToPropagationManagerClient{stream}
	return x, nil
}

type PropagationManager_SendDataToPropagationManagerClient interface {
	Send(*BlockData) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type propagationManagerSendDataToPropagationManagerClient struct {
	grpc.ClientStream
}

func (x *propagationManagerSendDataToPropagationManagerClient) Send(m *BlockData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *propagationManagerSendDataToPropagationManagerClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PropagationManagerServer is the server API for PropagationManager service.
// All implementations should embed UnimplementedPropagationManagerServer
// for forward compatibility
type PropagationManagerServer interface {
	SendDataToPropagationManager(PropagationManager_SendDataToPropagationManagerServer) error
}

// UnimplementedPropagationManagerServer should be embedded to have forward compatible implementations.
type UnimplementedPropagationManagerServer struct {
}

func (UnimplementedPropagationManagerServer) SendDataToPropagationManager(PropagationManager_SendDataToPropagationManagerServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDataToPropagationManager not implemented")
}

// UnsafePropagationManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropagationManagerServer will
// result in compilation errors.
type UnsafePropagationManagerServer interface {
	mustEmbedUnimplementedPropagationManagerServer()
}

func RegisterPropagationManagerServer(s grpc.ServiceRegistrar, srv PropagationManagerServer) {
	s.RegisterService(&PropagationManager_ServiceDesc, srv)
}

func _PropagationManager_SendDataToPropagationManager_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PropagationManagerServer).SendDataToPropagationManager(&propagationManagerSendDataToPropagationManagerServer{stream})
}

type PropagationManager_SendDataToPropagationManagerServer interface {
	SendAndClose(*Response) error
	Recv() (*BlockData, error)
	grpc.ServerStream
}

type propagationManagerSendDataToPropagationManagerServer struct {
	grpc.ServerStream
}

func (x *propagationManagerSendDataToPropagationManagerServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *propagationManagerSendDataToPropagationManagerServer) Recv() (*BlockData, error) {
	m := new(BlockData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PropagationManager_ServiceDesc is the grpc.ServiceDesc for PropagationManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropagationManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gosphere.PropagationManager",
	HandlerType: (*PropagationManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDataToPropagationManager",
			Handler:       _PropagationManager_SendDataToPropagationManager_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "propagation_manager.proto",
}
